Important:
* Improvement to node management (join mechanism, eg. with zookeeper?)
* Ability to remove regular nodes
* Implement a primitive that deletes keys from tapioca. 

Nice-to-have:
* Tapioca's storage also consumes lots of memory. One idea is to change the LRU policy of the storage for getting rid of cached entries when garbage collecting. Implementing LRU requires to keep an ordered list of cached items, which is expensive in terms of memory overhead. Another idea is the following. Replace the storage with BDB (in-memory) and see how performance / memory overhead looks like.
* Both Tapioca and Paxos do not marshal data before sending messages. Lot's of libraries available so ideally we should just pick one and use it. This is *ugly* but not so critical
* Port MoSQL to S-DUR (for scalability);
* Improve use of space in main B+Tree node struct
* Improved memory handling; malloc in larger blocks as opposed to many small mallocs per key/value happening in B+Tree code right now
* B+Tree node size flexibility
* Improved Tapioca caching policy
* Eg. Ability to decide which keys get cached or not (eg. to avoid caching leaf nodes that are likely never to be read again)
*
